{
    "CourseName-Num": "MCA272– Programming Using Java",
    "Total-Teaching-Hours": "90",
    "Max-Marks": "150",
    "Credits": "5",
    "Course-Outcomes": [
        {
            "CO1": "Understanding and applying the principles of object-oriented programming in the construction of robust, maintainable programs."
        },
        {
            "CO2": "Analyze the various societal and environmental problems critically to develop solutions using the features of programming language."
        },
        {
            "CO3": "Develop sustainable and innovative solutions for real-time problems."
        }
    ],
    "Units": [
        {
            "Teaching-hours": "18",
            "Title": "INTRODUCTION TO OBJECT ORIENTED PROGRAMMING (OOP) AND CLASSES",
            "Contents": [
                "Unit-1",
                "Teaching Hours: 18",
                "INTRODUCTION TO OBJECT ORIENTED PROGRAMMING (OOP) AND CLASSES",
                "Introduction to Object Oriented Programming (OOP)",
                "Object-Oriented Programming (OOP) Principles- Class Fundamentals - Declaring Objects - Introducing Methods - Overloading methods – Constructors - Parameterized Constructors - this Keyword.",
                "Class Features",
                "Garbage Collection - the finalize () Method - Introducing Access Control - Understanding static - Introducing nested and inner classes - String class - String Buffer Class - Command Line Arguments."
            ],
            "Lab-exercises": [
                "1. Identify a domain of your choice, list out ten entities in the domain. For each entity, identify a minimum 10 attributes and assign the data type for each attribute with proper justification.",
                "2. Implement the concept of class, data members, member functions and access specifiers.",
                "3. Implement the concept of function overloading & Constructor overloading."
            ]
        },
        {
            "Teaching-hours": "18",
            "Title": "INHERITANCE, INTERFACES & PACKAGES AND MULTITHREADING IN JAVA",
            "Contents": [
                "Unit-2",
                "Teaching Hours: 18",
                "INHERITANCE, INTERFACES & PACKAGES AND MULTITHREADING IN JAVA",
                "Inheritance in Java",
                "Inheritance Basics - Multilevel Hierarchy- Using super - Method overriding - Dynamic Method Dispatch- Abstract keyword- Using final with inheritance - The Object Class.",
                "Interfaces and Packages",
                "Inheritance in java with Interfaces – Defining Interfaces - Implementing Interfaces - Extending Interfaces- Creating Packages - CLASSPATH variable - Access protection - Importing Packages - Interfaces in a Package.",
                "Multithreading Java",
                "Thread Model - Life cycle of a Thread - Java Thread Priorities - Runnable interface and Thread Class- Thread Synchronization – Inter Thread Communication."
            ],
            "Lab-exercises": [
                "4. Implement String and String Buffer classes.",
                "5. Implement the concept of inheritance, super, abstract and final keywords.",
                "6. Implement the concept of package and interface.",
                "7. Implement the concept of multithreading."
            ]
        },
        {
            "Teaching-hours": "18",
            "Title": "GENERICS, LAMBDA AND THE COLLECTIONS FRAMEWORK",
            "Contents": [
                "Unit-3",
                "Teaching Hours: 18",
                "GENERICS, LAMBDA AND THE COLLECTIONS FRAMEWORK",
                "Generics",
                "Generics Concept - General Form of a Generic Class – Bounded Types – Generic Class Hierarchy - Generic Interfaces – Restrictions in Generics.",
                "Lambda Expression",
                "Introduction to Lambda expression- Block Lambda Expressions - Generic Functional Interfaces - Passing lambda expressions as arguments - Lambda expressions and exceptions- Lambda expressions and variable capture.",
                "The Collections Framework",
                "The Collections Overview – Collection Interface – List Interface – Set Interface – SortedSet Interface – Queue Interface - ArrayList Class – LinkedList Class – HashSet Class – Using an Iterator – The For Each Statement. Working with maps – The map interfaces, the map classes. Comparators- the collection algorithms"
            ],
            "Lab-exercises": [
                "8. Implement the concept of Generics",
                "9. Implement the concept of the lambda expression",
                "10. Implement the concept of a collection framework"
            ]
        },
        {
            "Teaching-hours": "18",
            "Title": "JAVA BEANS AND JDBC",
            "Contents": [
                "Unit-4",
                "Teaching Hours: 18",
                "JAVA BEANS AND JDBC",
                "JDBC",
                "Introduction to JDBC- Connecting to the database- Basic JDBC Operations – Essential JDBC Classes – JDBC Drivers – JDBC-ODBC Bridge – Connecting to a database with driver manager – JDBC database URL.",
                "JAVA BEANS",
                "Java beans - Advantages of Beans – Introspection- Bound and Constrained Properties – Persistence – Customizers - The JavaBeans API.",
                "JAVA SWING",
                "Swing Basics – Components and Containers – JLabel and ImageIcons- JTextField – Swing Buttons – JTabbedPane – JScrollPane – JList – JComboBox – JTable – Swing Menus."
            ],
            "Lab-exercises": [
                "11. Implement the concept of JDBC",
                "12. Implement the concept of java beans",
                "13. 13. Implement the concept of java swing"
            ]
        },
        {
            "Teaching-hours": "18",
            "Title": "JAVA SERVLETS & JSP",
            "Contents": [
                "Unit-5",
                "Teaching Hours: 18",
                "JAVA SERVLETS & JSP",
                "JAVA SERVLETS",
                "Servlets Basics – Life Cycle of a Servlet –A Simple Servlet - The Servlet API – Servlet Interfaces – Generic Servlet Class- HttpServletRequest Interface – HttpServeltResponse",
                "JSP",
                "The JSP development model – component of jsp page – Page directive – Action – scriptlet – JSP expression, JSP Syntax and semantics, JSP in XML."
            ],
            "Lab-exercises": [
                "14. Implement the concept of java servlets",
                "15. Implement the concept of JSP"
            ]
        }
    ],
    "Text-books": [
        "Schildt Herbert, Java : The Complete Reference, Tata McGraw- Hill, 11 th Edition,2019",
        "The complete reference JSP 2.0, Tata McGraw- Hill, 2nd Edition, Phil Hanna",
        "Cay S Horstmann, Core Java Volume 1 Fundamentals, Prentice Hall, 11th Edition, 2018."
    ],
    "Web-resources": [
        "https://www.javatpoint.com/java-tutorial",
        "https://www.geeksforgeeks.org/java/"
    ]
}